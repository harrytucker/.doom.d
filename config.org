#+TITLE: My Emacs Config
#+AUTHOR: Harry Tucker

* Contents
** [[Org-Mode]]
** [[Visuals]]
** [[LaTeX]]
** [[Behaviour]]
** [[Languages]]
* Personal Info
#+BEGIN_SRC elisp
(setq user-full-name "Harry Tucker")
#+END_SRC
* Org-Mode
** Setup
Let's require the latex backend for org export so we can configure it.
#+BEGIN_SRC elisp
(require 'ox-latex)
#+END_SRC
** Code Listings
Let's use the *minted* and *color* packages to provide syntax highlighting for source code blocks when exporting. First I've set the default packages list for latex export using *org-latex-packages-alist*, then set *org-latex-listings* to use minted. We also need to configure *org-latex-pdf-process* to allow shell escapes in order to use pygments.
#+BEGIN_SRC elisp
(add-to-list 'org-latex-packages-alist '("" "minted"))
(add-to-list 'org-latex-packages-alist '("" "color"))

(setq org-latex-listings 'minted
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
Minted requires the the Pygment external library which can be installed through pip:
#+BEGIN_SRC bash :tangle no
sudo apt install python3-pip
pip3 install pygments
#+END_SRC
Pip executables may not be in your default PATH, on Ubuntu 20.04, Pygments was installed to =$HOME/.local/bin=, add it to your ZSH path using the following:
#+BEGIN_SRC bash :tangle no
echo "export PATH=$PATH:/home/user/.local/bin" >> ~/.zshenv #
source ~/.zshenv
#+END_SRC
** Tables
Booktabs is a LaTeX package that's useful for configuring the typesetting of tables, so we'll add this to our default package list for LaTeX export.
#+BEGIN_SRC elisp
(add-to-list 'org-latex-packages-alist '("" "booktabs"))
(add-to-list 'org-latex-packages-alist '("" "tabularx"))
#+END_SRC
* LaTeX
** Custom Keybinds
Not a big fan of using C-c C-a to compile LaTeX so I've added a shortcut to local leader:
#+BEGIN_SRC elisp
(map! (:when (featurep! :lang latex)
       (:map LaTeX-mode-map
        :localleader
        :desc "Compile" "c" #'TeX-command-run-all
        :desc "Insert environment" "e" #'LaTeX-environment
        :desc "Insert section" "s" #'LaTeX-section
        :desc "Format document" "f" #'LaTeX-fill-buffer
        :desc "Fold buffer" "," #'TeX-fold-buffer
        :desc "Unfold buffer" "." #'TeX-fold-clearout-buffer)))
#+END_SRC
** Hooks
Using the fold and unfold commands in the above keymap, you can make your LaTeX documents a bit easier to look at when editing. These two hooks enable TeX-fold-mode, and then fold all environments in an opened LaTeX buffer.
#+BEGIN_SRC elisp
(add-hook 'LaTeX-mode-hook (TeX-fold-mode))
(add-hook 'find-file-hook 'TeX-fold-buffer t)
#+END_SRC
Creating LaTeX tables can be a bit bulky, so let's enable orgtbl-mode. This lets us use org-mode's table facilities in AUCTex, which we can export using [[https://www.gnu.org/software/emacs/manual/html_node/org/A-LaTeX-example.html][radio tables!]]
#+BEGIN_SRC elisp
(add-hook 'LaTeX-mode-hook (orgtbl-mode))
#+END_SRC
Using this you can create org-mode tables inside of a LaTeX buffer, and then export it wherever you wish using C-c C-c while editing the table. Here's an example:
#+BEGIN_SRC latex :tangle no
\usepackage{comments}

% BEGIN RECEIVE ORGTBL salesfigures
% END RECEIVE ORGTBL salesfigures
\begin{comment}
,#+ORGTBL: SEND salesfigures orgtbl-to-latex :booktabs t
| Month | Days | Nr sold | per day |
|-------+------+---------+---------|
| Jan   |   23 |      55 |     2.4 |
| Feb   |   21 |      16 |     0.8 |
| March |   22 |     278 |    12.6 |
,#+TBLFM: $4=$3/$2;%.1f
% $ example here is from the linked URL above this code snippet, take a look there for more info.
#+END_SRC
* Visuals
** Doom Theme
Fira Code and a standard dark theme leads to happiness. All a matter of preference of course ;)
#+BEGIN_SRC elisp
(setq doom-theme 'doom-dracula)
(setq doom-font (font-spec :family "Fira Code" :size 14))
#+END_SRC
#+BEGIN_SRC elisp
(setq doom-themes-treemacs-theme "doom-colors")
#+END_SRC
** Editor Customisation
Since we're using evil-mode, relative line numbers make some vim bindings easier to work out on the fly, so we'll set display-line-numbers-type.
#+BEGIN_SRC elisp
(setq display-line-numbers-type 'relative)
#+END_SRC
** Modeline
This provides no functionality whatsoever, but I like having icons for the current major-mode in use, so let's activate that in *doom-modeline*.
#+BEGIN_SRC elisp
(setq doom-modeline-major-mode-icon t)
(setq doom-modeline-major-mode-color-icon t)
#+END_SRC
* Behaviour
** Editor
Using colour coded brackets makes it much easier for me to parse code, so let's activate *rainbow-delimiters-mode*
#+BEGIN_SRC elisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC
* Languages
** Rust
For the language server, I prefer rust-analyzer over RLS, but both variables need to be set or else emacs will go and use RLS regardless.
#+BEGIN_SRC elisp
(setq lsp-rust-server 'rust-analyzer)
(setq rustic-lsp-server 'rust-analyzer)
#+END_SRC

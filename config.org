#+TITLE: Harry's Doom Emacs Config
#+AUTHOR: Harry Tucker

* About
This is my personal Emacs 27 config that I use for my work and personal stuff.
This config is pretty small, and primarily makes small changes to things that
bother me, as Doom Emacs is pretty nice for me out of the box. I primarily work
with:
+ Go
+ Python
+ Rust
+ Docker
+ Kubernetes
You may notice that I have enabled Doom's Java module, this is primarily so I
have =groovy-mode= available for when I need to edit Jenkinsfiles and the like.
* Configuration
** Personal Information
#+BEGIN_SRC elisp
(setq user-full-name "Harry Tucker" ; personal info
      user-mail-address "tucker.harry@outlook.com")
#+END_SRC
** General
I like using rainbow brackets, so I've enabled these for all programming modes.
#+BEGIN_SRC elisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode) ; rainbow brackets!
#+END_SRC
*** Visuals
**** Doom Themes
Dracula is my theme of choice, and JetBrains Mono my favourite font. By default,
Treemacs uses a colour scheme based on the Atom text editor, so I set this to
=doom-colors= match the rest of the editor.
#+BEGIN_SRC elisp
(setq doom-theme 'doom-dracula                  ; set doom theme
      doom-themes-treemacs-theme "doom-colors"  ; set treemacs theme
      doom-font (font-spec                      ; set font family
                 :family "JetBrains Mono"
                 :size 14))
#+END_SRC
**** Modeline
This provides no functionality whatsoever, but I like having an icon that
displays the current major-mode in use.
#+BEGIN_SRC elisp
(setq doom-modeline-major-mode-icon t        ; enable modeline major-mode icon
      doom-modeline-major-mode-color-icon t) ; use coloured icons
#+END_SRC
**** Evil
I can use =undo-tree= as a linear undo system if need be, but enabling it also
gives me access to some niceties and I don't need to rely on Git stashes in
order to retain code I'm not sure about.
#+begin_src elisp
(evil-set-undo-system 'undo-tree) ; tree-based undo and redo functionality
#+end_src
** Programming
*** Database
I only really use PostgreSQL when it comes to relational databases, so rather
than set this everytime, I've set it as the default SQL dialect.
#+BEGIN_SRC elisp
(require 'sql)
(sql-set-product 'postgres) ; use postgres dialect for sql
#+END_SRC
*** Rust
RLS has been deprecated as the primary language server for Rust and
rust-analyzer is official language server going forward. I've set rust-analyzer
as my language server choice and enabled procedural macro expansion and build
script support.
#+BEGIN_SRC elisp
(use-package! rustic
  :defer
  :config
  (setq lsp-rust-server 'rust-analyzer
        lsp-rust-analyzer-proc-macro-enable t
        lsp-rust-analyzer-cargo-run-build-scripts t))
#+end_src
*** Python
I like using hard line wraps to keep my Python comments tidy, so let's use a
hook to enable =python-docstring-mode= for any Python buffers. This minor mode
lets me use =fill-paragraph= while keeping everything Pythonic, and enables syntax
highlighting in docstrings.
#+begin_src elisp
(use-package! python-docstring
  :defer
  :hook (python-mode . python-docstring-mode))
#+end_src
** Writing
*** Org-Mode
**** Setup
Require ox-latex and ox-bibtex for configuring items here and allowing citations
in org-mode.
#+BEGIN_SRC elisp
(require 'ox-latex)   ; required for config
(require 'ox-bibtex)
#+END_SRC
**** Tables
Booktabs is a LaTeX package that's useful for configuring the typesetting of
tables, so we'll add this to our default package list for LaTeX export.
#+BEGIN_SRC elisp
(add-to-list 'org-latex-packages-alist '("" "booktabs")) ; include in org-latex
(add-to-list 'org-latex-packages-alist '("" "tabularx")) ; export
#+END_SRC
* Extra Packages
I use some packages from [[https://melpa.org][MELPA]] that Doom Emacs doesn't expose through =init.el=.
These are imported using Doom's =package!= macro.
#+begin_src elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; .doom.d/packages.el

;; Python
(package! python-docstring) ; provides syntax highlighting and fill-paragraph
                            ; functionality
#+end_src
* Workarounds
** MacOS & PDF Tools
I have found that PDF Tools often really screws up the display resolution when
running on MacOS for reasons I don't entirely understand. The following snippet
may or may not fix it, but I'm including it anyway.
#+begin_src elisp
(setq pdf-view-use-scaling t          ; MacOS specific workarounds
      pdf-view-use-imagemagick nil)
#+end_src

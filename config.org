#+TITLE: Harry's Doom Emacs Config
#+AUTHOR: Harry Tucker

* About
This is my personal Emacs 27 config that I use for my work and personal stuff.
This config is pretty small, and primarily makes small changes to things that
bother me, as Doom Emacs is pretty nice for me out of the box. I primarily work
with:
+ Go
+ Python
+ Rust
+ Docker
+ Kubernetes
You may notice that I have enabled Doom's Java module, this is primarily so I
have =groovy-mode= available for when I need to edit Jenkinsfiles and the like.
* Configuration
** Personal Information
#+BEGIN_SRC elisp
(setq user-full-name "Harry Tucker" ; personal info
      user-mail-address "tucker.harry@outlook.com")
#+END_SRC
** General
I like using rainbow brackets, so I've enabled these for all programming modes.
#+BEGIN_SRC elisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode) ; rainbow brackets!
#+END_SRC
*** Visuals
**** Doom Themes
Dracula is my theme of choice, and JetBrains Mono my favourite font. By default,
Treemacs uses a colour scheme based on the Atom text editor, so I set this to
=doom-colors= match the rest of the editor.
#+BEGIN_SRC elisp
(setq doom-theme 'doom-dracula                  ; set doom theme
      doom-themes-treemacs-theme "doom-colors"  ; set treemacs theme
      doom-font (font-spec                      ; set font family
                 :family "JetBrains Mono"
                 :size 14))
#+END_SRC
**** Modeline
This provides no functionality whatsoever, but I like having an icon that
displays the current major-mode in use.
#+BEGIN_SRC elisp
(setq doom-modeline-major-mode-icon t        ; enable modeline major-mode icon
      doom-modeline-major-mode-color-icon t) ; use coloured icons
#+END_SRC
**** Evil
I can use =undo-tree= as a linear undo system if need be, but enabling it also
gives me access to some niceties and I don't need to rely on Git stashes in
order to retain code I'm not sure about.
#+begin_src elisp
(evil-set-undo-system 'undo-tree) ; tree-based undo and redo functionality
#+end_src
**** Frames
Rather than manually maximising the default frame each time I launch Emacs, I
can do this automatically. The =IS-MAC= variable is populated by Doom Emacs in
this case, but this would be possible to handle by checking the =system-type=
variable which is part of the default Emacs install.
#+begin_src elisp
;; vcxsrv on windows has issues with this, so only enable on MacOS
(if IS-MAC (add-to-list 'default-frame-alist '(fullscreen . fullboth)))
#+end_src
** Programming
*** Databases
I only really use PostgreSQL when it comes to relational databases, so rather
than set this everytime, I've set it as the default SQL dialect.
#+BEGIN_SRC elisp
(require 'sql)
(sql-set-product 'postgres) ; use postgres dialect for sql
#+END_SRC
*** Protobuffers
By default, =protobuf-mode= indents to a width of 2 spaces. I generally use 4,
so I define a style that uses =c-basic-offset= to fix this. Importantly, due to
Doom Emacs' integration with =format-all-mode=, a `.clang-format` file may be
needed to prevent clang-format from overriding this upon saving a file.
#+begin_src elisp
(defconst protobuf-style
  '((c-basic-offset . 4)
    (indent-tabs-mode . nil)))

(add-hook 'protobuf-mode-hook
          (lambda () (c-add-style "protobuf-style"
                                  protobuf-style t)))
#+end_src
*** Rust
RLS has been deprecated as the primary language server for Rust and
rust-analyzer is official language server going forward. I've set rust-analyzer
as my language server choice and enabled procedural macro expansion and build
script support.
#+BEGIN_SRC elisp
(setq lsp-rust-server 'rust-analyzer
      lsp-rust-analyzer-proc-macro-enable t
      lsp-rust-analyzer-cargo-run-build-scripts t)
#+end_src

Debuggers are nice, sure would be cool to use those in Rust as well.
#+begin_src elisp
(require 'dap-mode)
(dap-register-debug-template "Rust::GDB Run Configuration"
                             (list :type "gdb"
                                   :request "launch"
                                   :name "GDB::Run"
                                   :gdbpath "rust-gdb"
                                   :target nil
                                   :cwd nil))
#+end_src
*** Python
I like using hard line wraps to keep my Python comments tidy, so let's use a
hook to enable =python-docstring-mode= for any Python buffers. This minor mode
lets me use =fill-paragraph= while keeping everything Pythonic, and enables syntax
highlighting in docstrings.
#+begin_src elisp
(add-hook 'python-mode-hook #'python-docstring-mode)
#+end_src
*** Debugging
Doom Emacs can install =dap-mode= and the additional relevant modes for Python
and Go support. However, some of the stuff around it doesn't appear to be set-up
upon enabling the module in =init.el=. This configures a bunch of keybinds to
enable easier use of =dap-mode= once a session has been started without having
to =M-x= every single command.
#+begin_src elisp
(map! :map dap-mode-map
      :leader
      :prefix ("d" . "dap")
      ;; basics
      :desc "dap next"          "n" #'dap-next
      :desc "dap step in"       "i" #'dap-step-in
      :desc "dap step out"      "o" #'dap-step-out
      :desc "dap continue"      "c" #'dap-continue
      :desc "dap hydra"         "h" #'dap-hydra
      :desc "dap debug restart" "r" #'dap-debug-restart
      :desc "dap debug"         "s" #'dap-debug

      ;; debug
      :prefix ("dd" . "Debug")
      :desc "dap debug recent"  "r" #'dap-debug-recent
      :desc "dap debug last"    "l" #'dap-debug-last

      ;; eval
      :prefix ("de" . "Eval")
      :desc "eval"                "e" #'dap-eval
      :desc "eval region"         "r" #'dap-eval-region
      :desc "eval thing at point" "s" #'dap-eval-thing-at-point
      :desc "add expression"      "a" #'dap-ui-expressions-add
      :desc "remove expression"   "d" #'dap-ui-expressions-remove

      :prefix ("db" . "Breakpoint")
      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)
#+end_src
** Writing
*** Org-Mode
**** Setup
Require ox-latex and ox-bibtex for configuring items here and allowing citations
in org-mode.
#+BEGIN_SRC elisp
(require 'ox-latex)   ; required for config
(require 'ox-bibtex)
#+END_SRC
**** Tables
Booktabs is a LaTeX package that's useful for configuring the typesetting of
tables, so we'll add this to our default package list for LaTeX export.
#+BEGIN_SRC elisp
(add-to-list 'org-latex-packages-alist '("" "booktabs")) ; include in org-latex
(add-to-list 'org-latex-packages-alist '("" "tabularx")) ; export
#+END_SRC
**** Hard-Wrap at 80 Characters
When using =org-mode= for notes, I end up filling every paragraph to hard-wrap
the text to 80 characters per-line. I wanted this to behave like Magit's commit
message window mode and automatically hard-wrap the text. Turns out
=auto-fill-mode= can do this for you.

You can also use =refill-mode= for this purpose but the automatic refilling of
existing paragraphs causes issues with code blocks and everything falls apart.
That works fine on text-only buffers though.
#+begin_src elisp
(add-hook 'org-mode-hook #'auto-fill-mode)
#+end_src
**** Org-Tree-Slide
Using =org-mode= for presentations, let's prevent headings below the immediate
top level from being used as slides, and default to the presentation profile for
=org-tree-slide=.

I tried adding a hook for toggling a light theme and line numbers when beginning
a presentation, but that ended up being more trouble than it's worth for now.
#+begin_src elisp
(setq org-tree-slide-skip-outline-level 2)
(org-tree-slide-presentation-profile)
#+end_src

Currently there's a breaking change in Org 9.6, that at least on MacOS, results
in =org-tree-slide= falling over when the file contains a source code block.
It's possible to workaround this by setting =org-fold-core-style= to
='overlays=. However, using [[https://github.com/takaxp/org-tree-slide/issues/54#issuecomment-1185772944][takaxp's snippet]] you can simply add the correct
=SPEC= argument for Doom Emacs' hook functions.
#+begin_src elisp :tangle no
;;
;;; Hooks

;;;###autoload
(defun +org-present-hide-blocks-h ()
  "Hide org #+ constructs."
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "^[[:space:]]*\\(#\\+\\)\\(\\(?:BEGIN\\|END\\|ATTR\\)[^[:space:]]+\\).*" nil t)
      (org-fold-region (match-beginning 1)
                       (match-end 0)
                       org-tree-slide-mode
                       'block))))

;;;###autoload
(defun +org-present-hide-leading-stars-h ()
  "Hide leading stars in headings."
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "^\\(\\*+\\)" nil t)
      (org-fold-region (match-beginning 1)
                       (match-end 1)
                       org-tree-slide-mode
                       'headline))))
#+end_src
* Extra Packages
I use some packages from [[https://melpa.org][MELPA]] that Doom Emacs doesn't expose through =init.el=.
These are imported using Doom's =package!= macro.
#+begin_src elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; .doom.d/packages.el

;; Python
(package! python-docstring) ; provides syntax highlighting and fill-paragraph
                            ; functionality

;; gRPC
(package! protobuf-mode) ; work with .proto files
#+end_src
* Workarounds
** MacOS & PDF Tools
I have found that PDF Tools often really screws up the display resolution when
running on MacOS for reasons I don't entirely understand. The following snippet
may or may not fix it, but I'm including it anyway.
#+begin_src elisp
(setq pdf-view-use-scaling t          ; MacOS specific workarounds
      pdf-view-use-imagemagick nil)
#+end_src

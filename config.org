#+TITLE: Harry's Doom Emacs Config
#+AUTHOR: Harry Tucker

* About
This is my personal Emacs 27 config that I use for my work and personal stuff.
This config is pretty small, and primarily makes small changes to things that
bother me, as Doom Emacs is pretty nice for me out of the box. I primarily work
with:
+ Go
+ Python
+ Rust
+ Docker
+ Kubernetes
You may notice that I have enabled Doom's Java module, this is primarily so I
have =groovy-mode= available for when I need to edit Jenkinsfiles and the like.
* Configuration
** Personal Information
#+BEGIN_SRC elisp
(setq user-full-name "Harry Tucker" ; personal info
      user-mail-address "tucker.harry@outlook.com")
#+END_SRC
** General
I like using rainbow brackets, so I've enabled these for all programming modes.
#+BEGIN_SRC elisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode) ; rainbow brackets!
#+END_SRC
*** Visuals
**** Doom Themes
Dracula is my theme of choice, and JetBrains Mono my favourite font. By default,
Treemacs uses a colour scheme based on the Atom text editor, so I set this to
=doom-colors= match the rest of the editor.
#+BEGIN_SRC elisp
(setq doom-theme 'doom-dracula                  ; set doom theme
      doom-themes-treemacs-theme "doom-colors"  ; set treemacs theme
      doom-font (font-spec                      ; set font family
                 :family "JetBrains Mono"
                 :size 14))
#+END_SRC
**** Editor Customisation
Relative line numbers can be useful for Evil mode, so these are enabled.
#+BEGIN_SRC elisp
(setq display-line-numbers-type 'relative)
#+END_SRC
**** Modeline
This provides no functionality whatsoever, but I like having an icon that
displays the current major-mode in use.
#+BEGIN_SRC elisp
(setq doom-modeline-major-mode-icon t        ; enable modeline major-mode icon
      doom-modeline-major-mode-color-icon t) ; use coloured icons
#+END_SRC
** Programming
I only really use PostgreSQL when it comes to relational databases, so rather
than set this everytime, I've set it as the default SQL dialect.
#+BEGIN_SRC elisp
(require 'sql)
(sql-set-product 'postgres) ; use postgres dialect for sql
#+END_SRC
*** Rust
RLS has been deprecated as the primary language server for Rust and
rust-analyzer is official language server going forward. I've set rust-analyzer
as my language server choice and enabled procedural macro expansion and build
script support.
#+BEGIN_SRC elisp
(setq lsp-rust-server 'rust-analyzer) ; set language server

(setq lsp-rust-analyzer-proc-macro-enable t        ; enable proc macros
      lsp-rust-analyzer-cargo-run-build-scripts t) ; enable build scripts
#+end_src
*** Python
I like using hard line wraps to keep my Python comments tidy, so let's use a
hook to enable =python-docstring-mode= for any Python buffers. This minor mode
lets me use =fill-paragraph= while keeping everything Pythonic, and enables syntax
highlighting in docstrings.
#+begin_src elisp
(add-hook 'python-mode-hook 'python-docstring-mode) ; load python-docstring-mode
                                                    ; when opening a python
                                                    ; buffer
#+end_src
** Writing
*** Org-Mode
**** Setup
Require ox-latex and ox-bibtex for configuring items here and allowing citations
in org-mode.
#+BEGIN_SRC elisp
(require 'ox-latex)   ; required for config
(require 'ox-bibtex)
#+END_SRC
**** Code Listings
Let's use the =minted= and =color= packages to provide syntax highlighting for
source code blocks when exporting. First I've set the default packages list for
latex export using =org-latex-packages-alist=, then set =org-latex-listings= to
use minted. We also need to configure =org-latex-pdf-process= to allow shell
escapes in order to use pygments.
#+BEGIN_SRC elisp
(add-to-list 'org-latex-packages-alist '("" "minted")) ; include in org-latex
(add-to-list 'org-latex-packages-alist '("" "color"))  ; export

(setq org-latex-listings 'minted org-latex-pdf-process ; enable shell-escapes
                                                       ; for minted
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "bibtex %b"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
Minted requires the the Pygment external library which can be installed through
pip:
#+BEGIN_SRC bash :tangle no
sudo apt install python3-pip pip3 install pygments
#+END_SRC
Pip executables may not be in your default PATH, on Ubuntu 20.04, Pygments was
installed to =$HOME/.local/bin=, add it to your ZSH path using the following:
#+BEGIN_SRC bash :tangle no
echo "export PATH=$PATH:/home/user/.local/bin" >> ~/.zshenv # source ~/.zshenv
#+END_SRC
**** Tables
Booktabs is a LaTeX package that's useful for configuring the typesetting of
tables, so we'll add this to our default package list for LaTeX export.
#+BEGIN_SRC elisp
(add-to-list 'org-latex-packages-alist '("" "booktabs")) ; include in org-latex
(add-to-list 'org-latex-packages-alist '("" "tabularx")) ; export
#+END_SRC
*** LaTeX
**** Section Fontification
I like having section fonts larger to more easily read the document structure.
In the hooks section, I've added a call to a function to update the sectioning
faces, or else the section font size will not be updated.
#+begin_src elisp
(setq font-latex-fontify-sectioning 1.3) ; increase section font scaling
#+end_src
**** Custom Keybinds
Not a big fan of using C-c C-a to compile LaTeX so I've added a shortcut to my
local leader key.
#+BEGIN_SRC elisp
(map! (:when (featurep! :lang latex) ; custom keymap using local leader
       (:map LaTeX-mode-map
        :localleader
        :desc "Compile" "c" #'TeX-command-run-all
        :desc "Insert environment" "e" #'LaTeX-environment
        :desc "Insert section" "s" #'LaTeX-section
        :desc "Format document" "f" #'LaTeX-fill-buffer
        :desc "Fold buffer" "," #'TeX-fold-buffer
        :desc "Unfold buffer" "." #'TeX-fold-clearout-buffer)))
#+END_SRC
**** Hooks
Using the fold and unfold commands in the above keymap, you can make your LaTeX
documents a bit easier to look at when editing. These two hooks enable
TeX-fold-mode, and then fold all environments in an opened LaTeX buffer.
#+BEGIN_SRC elisp
(require 'tex-fold) ; required for config

(add-hook 'LaTeX-mode-hook #'TeX-fold-mode)     ; enable TeX-fold-mode
(add-hook 'after-find-file 'TeX-fold-buffer t)  ; auto-fold sections on load
(add-hook 'LaTeX-mode-hook 'font-latex-update-sectioning-faces) ; update section
                                                                ; font sizes
#+END_SRC
Creating LaTeX tables can be a bit bulky, so let's enable orgtbl-mode. This lets
us use org-mode's table facilities in AUCTex, which we can export using [[https://www.gnu.org/software/emacs/manual/html_node/org/A-LaTeX-example.html][radio
tables!]]
#+BEGIN_SRC elisp
(add-hook 'LaTeX-mode-hook #'orgtbl-mode) ; enable orgtbl mode for LaTeX
#+END_SRC
Using this you can create org-mode tables inside of a LaTeX buffer, and then
export it wherever you wish using C-c C-c while editing the table. Here's an
example:
#+BEGIN_SRC latex :tangle no
\begin{verbatim}
\usepackage{comments}

% BEGIN RECEIVE ORGTBL salesfigures
% END RECEIVE ORGTBL salesfigures
\begin{comment}
,#+ORGTBL: SEND salesfigures orgtbl-to-latex :booktabs t
| Month | Days | Nr sold | per day |
|-------+------+---------+---------|
| Jan   |   23 |      55 |     2.4 |
| Feb   |   21 |      16 |     0.8 |
| March |   22 |     278 |    12.6 |
,#+TBLFM: $4=$3/$2;%.1f
\end{comment}
\end{verbatim}
#+END_SRC
**** PDF Tools
PDF Tools is my preferred tool for PDFs, so I set this as the highest priority,
and include some other programs as backups just in case.
#+BEGIN_SRC elisp
(setq TeX-view-program-selection '((output-pdf "PDF Tools") ; pdf tool
        (output-pdf "Zathura")                              ; preferences
        ((output-dvi has-no-display-manager) "dvi2tty")
        ((output-dvi style-pstricks) "dvips and gv")
        (output-dvi "xdvi")
        (output-pdf "Evince")
        (output-html "xdg-open")
        (output-pdf "preview-pane")))
#+END_SRC
* Workarounds
** MacOS & PDF Tools
I have found that PDF Tools often really screws up the display resolution when
running on MacOS for reasons I don't entirely understand. The following snippet
may or may not fix it, but I'm including it anyway.
#+begin_src elisp
(setq pdf-view-use-scaling t          ; MacOS specific workarounds
      pdf-view-use-imagemagick nil)
#+end_src

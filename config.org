#+title: Harry's Doom Emacs Config
#+author: Harry Tucker

# HTML and LaTeX export --------------------------------------------------------
#+setupfile: org-themes/src/white_clean/white_clean.theme
#+options: toc:nil
#+latex_class: mimore
# ------------------------------------------------------------------------------

* About
I've made multiple attempts in the past at using Emacs as my primary text
editor, and didn't have much luck. About three years ago I found out about Doom
Emacs and forced myself to use it for two weeks, initially starting with
probably the most basic possible configuration, just setting up the theme:
#+begin_src elisp :tangle no
;;; .doom.d/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here

;; Set emacs theme
(setq doom-theme 'doom-dracula)
#+end_src

Once I figured out how to use =magit=, I've stuck with Emacs since then. It's
progressively taken over more and more of the tasks I do at work and on personal
projects. This literate config has grown since then to encompass a bunch of
different tasks, and is available on Git so I can use the same editor across
different machines. At time of writing, I've overhauled the configuration to
consolidate a bunch of disparate lisp into something that's hopefully more
coherent, and is more useful for me and others.
** Build Information
#+begin_src elisp :tangle no
(emacs-version)
#+end_src

#+RESULTS:
: GNU Emacs 30.1 (build 2, aarch64-apple-darwin24.3.0, NS appkit-2575.40 Version 15.3.1 (Build 24D70))
:  of 2025-03-07

#+begin_src elisp :tangle no
system-configuration-options
#+end_src

#+RESULTS:
: --enable-locallisppath=/usr/local/share/emacs/site-lisp --infodir=/usr/local/Cellar/emacs-mac/emacs-28.2-mac-9.1/share/info --mandir=/usr/local/Cellar/emacs-mac/emacs-28.2-mac-9.1/share/man --prefix=/usr/local/Cellar/emacs-mac/emacs-28.2-mac-9.1 --with-mac --enable-mac-app=/usr/local/Cellar/emacs-mac/emacs-28.2-mac-9.1 --with-gnutls --with-modules --with-native-compilation 'CFLAGS=-I/usr/local/opt/gcc/include -I/usr/local/opt/libgccjit/include' 'LDFLAGS=-L/usr/local/lib/gcc/12 -I/usr/local/opt/gcc/include -I/usr/local/opt/libgccjit/include'

* Configuration
** User Identification
#+begin_src elisp
;; Emacs User Identification
(setq user-full-name "Harry Tucker"
      user-mail-address "tucker.harry@outlook.com")
#+END_SRC
** General
*** Visuals
**** Theme & Font
Dracula is my theme of choice, and JetBrains Mono my favourite font. By default,
Treemacs uses a colour scheme based on the Atom text editor, so I set this to
=doom-colors= match the rest of the editor.
#+begin_src elisp
;; Set themes for Doom and Treemacs, and select the JetBrains Mono font
(setq doom-theme 'doom-dracula
      doom-themes-treemacs-theme "doom-colors"
      doom-font (font-spec
                 :family "JetBrainsMono Nerd Font"
                 :size 14))
#+end_src
**** Splash Image
#+begin_src elisp
(defun random-element-of-list (items)
  "Return a random element from a given list."
  (let* ((size (length items))
         (index (random size)))
    (nth index items)))

(defun splash-images ()
  "Return a list of available splash images."
  (let*
      ((splash-directory (concat doom-user-dir "images/")))
    (directory-files splash-directory 'full (rx ".png" eos))))

;; Sets the splash image to a random PNG file from the splash image directory
(setq fancy-splash-image (random-element-of-list (splash-images)))
#+end_src
**** Modeline
This provides no functionality whatsoever, but I like having an icon that
displays the current major-mode in use.
#+begin_src elisp
;; Enables modeline icons with colour support
(setq doom-modeline-major-mode-icon t
      doom-modeline-major-mode-color-icon t)
#+end_src
**** Editor
Normally this is the first thing I set up for any given text editor. Pairing
delimiters by colour makes a lot of sense, and I find it makes code easier to
parse, so I've set this up globally across all programming modes.
#+begin_src elisp
;; Highlights scope with various colours, replaces rainbow-delimiters-mode
(add-hook! 'prog-mode-hook #'prism-mode)
(add-hook! 'python-mode-hook #'prism-whitespace-mode)
(add-hook! 'yaml-mode-hook #'prism-whitespace-mode)

;; Lower the delay for displaying potential key chords
(setq which-key-idle-delay 0.2)

;; Fancy, modern looking flycheck displays
(use-package! flyover
  :config
  (add-hook 'flycheck-mode-hook #'flyover-mode))
#+end_src
**** Evil
I can use =undo-tree= as a linear system most of the time, which is what ends up
happening. In other cases, =undo-tree= basically provides a free stash of previous
code changes if I've been experimenting with some code, so is a nice escape
hatch to have, so I've enabled it as my undo system.
#+begin_src elisp
;; Allows undoing and redoing as a tree of changes, instead of being limited to
;; linear changes
(evil-set-undo-system 'undo-tree)
#+end_src
**** Eshell
Doom Emacs disables =eshell= from indicating colour support by default in order to
avoid running into issues with applications using it as an indicator of a fully
functional terminal emulator. I'm fine with working around that when it comes
up, since I can add to =eshell-visual-commands= when needed, so I've re-enabled
colour support.
#+begin_src elisp
;; Experimenting with Eshell's Plan 9 emulation, see here:
;; https://www.masteringemacs.org/article/complete-guide-mastering-eshell
(after! eshell
  (require 'em-smart)
  (eshell-smart-initialize)
  ;; Eshell's emulated echo doesn't seem to honour the -n flag.
  (setq eshell-plain-echo-behavior t))

;; Point bash-completion at the Homebrew installed Bash version as MacOS ships
;; an outdated Bash version.
(after! bash-completion
  (setq bash-completion-prog "/opt/homebrew/bin/bash"))
#+end_src
*** Projects
When using =projectile=, I don't want to search some directories that are just
noise, so I want to ignore them.
#+begin_src elisp
(use-package! projectile
  :defer
  :config
  ;; When looking for Go project files, I don't care about vendored dependencies
  (add-to-list 'projectile-globally-ignored-directories "*vendor"))
#+end_src
*** Completions
I'm trying out replacing =company-mode= with =corfu=. This is mainly because I've
read largely positive things about this new completion package and I'm hoping
it's a bit leaner and faster than =company-mode=.
#+begin_src elisp
(use-package! corfu
  :defer
  :config
  ;; Automatically select the first valid completion candidate
  (setq corfu-preselect 'prompt))
#+end_src
** Programming
*** Databases
I only really use PostgreSQL in my day-to-day, so I set it as my default SQL
product dialect. Auto formatting is configured with =apheleia-mode= to use
=pgformatter=, available on the Homebrew repository. Some configuration is
included for the PostgreSQL formatting to follow the style that I prefer.
#+begin_src elisp
;; Provides configuration for working with SQL within Emacs
(use-package! sql
  :defer
  :config
  (sql-set-product 'postgres))

;; Use pg_format for formatting SQL files upon saving the buffer
(set-formatter! 'pg_format '("pg_format" "--comma-break" "--keep-newline" "-") :modes '(sql-mode))
(setq-hook! 'sql-mode-hook +format-with 'pg_format)
(add-hook! 'sql-mode-hook #'apheleia-mode)

;; Doom disables SQL formatting by default, so you need to override this.
(delete 'sql-mode +format-on-save-disabled-modes)
#+end_src
*** Javascript/Typescript
I don't write a lot of Javascript or Typescript, so I haven't invested a lot of
time building a proper configuration for those modes. In what experience I have
had, running code actions through =SPC-c-a= doesn't work as well as the language
servers for Go or Rust, so I've enabled auto fixes to run on save to avoid
running eslint through a shell or fixing those lint failures by hand.
#+begin_src elisp
;; Provides configuration for using 'eslint' with Emacs
(use-package! lsp-eslint
  :defer
  :config
  ;; Automatically fix trivial lint failures
  (setq lsp-eslint-auto-fix-on-save t))
#+end_src
*** Rust
RLS has been deprecated as the primary language server for Rust and
rust-analyzer is official language server going forward. I've set rust-analyzer
as my language server choice and enabled procedural macro expansion and build
script support.
#+begin_src elisp
;; Provides configuration for working with the Rust programming language
(use-package! rustic
  :defer
  :config
  ;; Use 'rust-analyser', and enable options that allow further completion
  ;; support for crates that rely on macros and build scripts
  (setq lsp-rust-server 'rust-analyzer
        lsp-rust-analyzer-proc-macro-enable t
        lsp-rust-analyzer-cargo-run-build-scripts t)
  ;; For some reason this has been lowered to 2 which conflicts with rustfmt,
  ;; override this back to 4 spaces
  (setq rustic-indent-offset 4))
#+end_src
*** Python
I like using hard line wraps to keep my Python comments tidy, so let's use a
hook to enable =python-docstring-mode= for any Python buffers. This minor mode
lets me use =fill-paragraph= while keeping everything Pythonic, and enables syntax
highlighting in docstrings.
#+begin_src elisp
;; Provides better Emacs support for Python docstrings
(use-package! python-docstring-mode
  :hook python-mode)
#+end_src
*** Go
Out of the box, =go-mode= provides everything I need, but visualising coverage
using the =go-coverage= command is kind of lacklustre. This is kind of a bad hack
job but my Elisp isn't great. After loading in the =+go--run-tests= function, I've
defined my own function for running it, then automatically calling =go-coverage=
against the generated output, then binding that to a shortcut underneath the
local leader key.
#+begin_src elisp :tangle no
;; Provides configuration for working with the Go programming language
(use-package! go-mode
  :defer
  :config
  ;; Runs Go tests, and generate a coverage profile to 'cover.out'
  ;;
  ;; Note: this function does not currently clean up the produced coverage profile
  ;; once you're done.
  (defun go-cover-buffer ()
    (interactive)
    (+go--run-tests "-coverprofile cover.out")
    (go-coverage "cover.out"))
  ;; Make 'go-cover-buffer' available through the local leader key map
  (map! :map go-mode-map
        :localleader
        :prefix "t" ; t for tests
        :desc "view coverage" "c" #'go-cover-buffer))
#+end_src
*** PlantUML
The standard file extension is =.plantuml= but I've got many files that use =.puml=
instead. Add a mapping for this file extension to use =plantuml-mode= as the major
mode for these files.
#+begin_src elisp
(add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
#+end_src
*** Remote Access Tools
I'm trying to speed up Tramp for remote access as the default from Doom doesn't
work very well for me. I currently try using =sshx= as my access method as well as
avoiding projectile and lsp usage on remote machines.
#+begin_src elisp
;; Provides configuration for working with remote machines over SSH using Tramp
(use-package! tramp
  :defer
  :config
  ;; Use sshx by default for speed
  ;; Don't use /bin/sh as the default shell
  (let ((+tramp-shell "/bin/bash"))
    (setq tramp-default-remote-shell +tramp-shell)
    (setq vterm-tramp-shells `(("ssh" ,+tramp-shell)
                               ("sshx" ,+tramp-shell)
                               ("docker" ,+tramp-shell)))))
#+end_src
** Writing
*** Org Mode
Org Mode is probably the most popular markdown format for Emacs users, and has a
bunch of functionality and plugins available for use with it. For example, you
can use it to provide literate programming functionality, such as how this
document is set up to tangle into a final =config.el= setup that Emacs actually
ingests.

For writing in Org, I've configured a few things:
+ Hiding in-line text markup
+ Automatically hard wrapping text at 80 characters
+ Using =pdf-tools= for viewing PDF output
+ Increasing the font size of the first and second heading levels
+ Some opinionated LaTeX config
#+begin_src elisp
;; Provides configuration for working with 'org-mode'
(use-package! org
  ;; Wrap text at 80 characters for better Git diffs and readability
  :hook (org-mode . auto-fill-mode)
  ;; Org is a large package, defer loading but also load during downtime to
  ;; prevent hangs on first load
  :defer-incrementally t
  :config
  ;; Hide emphasis markers that wrap text (i.e. bold, italics)
  (setq org-hide-emphasis-markers t)

  ;; Record timestamps on task completion for org-agenda usage
  (setq org-log-done 'time)
  (setq org-agenda-start-with-log-mode t)

  ;; Capture scrum notes into new files, adapted from:
  ;; https://stackoverflow.com/a/11903246
  (defun capture-retro-file (path)
    (let ((name (read-string "Sprint Number: ")))
      (expand-file-name (format "Sprint %s Retrospective.org" name) path)))

  ;; Add capture templates for scrum tasks
  (add-to-list 'org-capture-templates
               `("r" "Sprint Retrospective" entry
                 (file (lambda () (capture-retro-file "~/org/Reports")))
                 (file ,(concat doom-user-dir "templates/sprint.org"))))

  ;; Use 'pdf-tools' as the default viewer for exported Org documents
  (add-to-list 'org-file-apps '("\\.pdf\\'" . pdf-tools))
  ;; Enlarge top and second level heading fonts
  (custom-set-faces!
    '(org-level-1
      :height 1.2
      :inherit outline-1)
    '(org-level-2
      :height 1.1
      :inherit outline-2))
  ;; Collect agenda from Org and Org Roam
  (setq org-agenda-files '("~/org"
                           "~/org/roam"
                           "~/org/roam/daily"))
  ;; Enable export support for LaTeX and BibTeX formats
  (require 'ox-latex)
  (require 'ox-bibtex)


  ;; Tectonic is a self-contained LaTeX engine, and downloads dependencies on the
  ;; fly, so I can avoid using a massive install of texlive-full.
  ;;
  ;; It also handles re-runs automatically for tools like Bibtex.
  (setq org-latex-pdf-process
        ;; PDF process expects a list of commands here as pdflatex normally
        ;; needs to be repeated.
        ;;
        ;; Since tectonic handles this automatically, we only need one item. The
        ;; `,` marker is used to partially evaluate the list so that
        ;; `doom-user-dir` is correctly concatenated using its value.
        `(,(concat "tectonic --outdir=%o %f -Z search-path=" doom-user-dir "latex")))

  ;; Better syntax highlighting in exported LaTeX
  (setq org-latex-src-block-backend 'engraved)
  ;; Enable additional packages for exported LaTeX, takes the form:
  ;;    ("options" "package" SNIPPET-FLAG COMPILERS)
  (setq org-latex-packages-alist '(("" "booktabs")
                                   ("" "tabularx")
                                   ("" "color")))
  ;; Define 'mimore' LaTeX document class for use in exports
  (add-to-list 'org-latex-classes
               '("mimore"
                 "\\documentclass{mimore}\n\[NO-DEFAULT-PACKAGES\]\n\[PACKAGES\]\n\[EXTRA\]"
                 ("\\section{%s}" . "\\section\*{%s}")
                 ("\\subsection{%s}" . "\\subsection\*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection\*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph\*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph\*{%s}")))
  (setq org-latex-default-class "mimore"))
#+end_src
**** Org-Tree-Slide
If LaTeX beamer presentations aren't your thing, or you want to use literate
programming to run code in live presentations; it's possible to hold
presentations directly from Org Mode itself.

I use the =org-tree-slide= package for this, which requires some basic
configuration. For my use case, I tell =org-tree-slide= to skip all headings above
the top level for slide generation, which effectively means I just treat top
level headings as slides. At time of writing, there are three different default
profiles available, so I've enabled the fancy one with all the animation bells
and whistles.
#+begin_src elisp
;; Provides support for presenting directly from 'org-mode' buffers
(use-package! org-tree-slide
  :after org
  :config
  ;; Hide formatting characters, use top-level headings as slides
  (setq org-tree-slide-skip-outline-level 2)
  ;; Use the fancy presentation profile, shiny animations!
  (org-tree-slide-presentation-profile))
#+end_src
**** Org Roam & UI
Org Roam can be used to extend Org Mode to become a personal wiki of sorts. I am
still trying to incorporate it more into my workflow, so the configuration here
is relatively sparse.
#+begin_src elisp
;; Provides configuration for 'org-roam', an Emacs knowledge graph
(use-package! org-roam
  :after org
  :config
  ;; Hide common link types from org-roam graph
  (setq org-roam-graph-link-hidden-types
        '("file"
          "http"
          "https")))
#+end_src

For inspecting a large Org Roam database, =org-roam-ui= is pretty good. I haven't
enabled starting it automatically on launching org-roam just yet as I want to
use roam more before I go that far. Most of the config here just follows the
recommendations from [[https://github.com/org-roam/org-roam-ui][org-roam-ui's README]].
#+begin_src elisp
;; Provides 'websocket', a dependency of 'org-roam-ui'
(use-package! websocket
  :after org-roam)

;; Provides 'org-roam-ui' a web frontend for 'org-roam'
(use-package! org-roam-ui
  :after org-roam
  :config
  ;; Sync UI theme with Emacs, follow current the buffer, update on save, and
  ;; open browser on start
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src
**** Calendar
I really like having a full calendar view in addition to the view provided by
=org-agenda=, which can be provided by =calfw=. By default, Doom's =calendar= module
installs the package, but doesn't provide a key binding so you can define your
own calendar function. For now, I'm just using the calendar from my =org-agenda=,
so I just need to map that function to a key.
#+begin_src elisp
(map! :leader
      :prefix ("o" . "open")
      :desc "Open calendar" "C" #'cfw:open-org-calendar)
#+end_src
*** Markdown
You can use =grip-mode= to provide GitHub markdown previews, but by default you'll
get rate limited by the GitHub API. To avoid this you'll need to authenticate
with a personal access token.
#+begin_src elisp
;; You'll need to require the auth-source library. It's built into Emacs.
(require 'auth-source)

;; Fetch API credentials from ~/.authinfo or ~/.netrc
(let ((credential (auth-source-user-and-password "api.github.com")))
  (setq grip-github-user (car credential)
        grip-github-password (cadr credential)))
#+end_src
** Tooling
*** Kubernetes
Define autoloads for commands from =kubernetes=, and enable =evil-mode= bindings for
use with the overview window.

This module is currently experimental, both for me to use and for the author to
write at the moment. I need to think of an Evil keymap for this, but for now
I've just mapped the dispatch menu to =SPC-k=.
#+begin_src elisp :tangle no
;; Provides configuration for interacting with Kubernetes clusters from within
;; Emacs
(use-package! kele
  :init
  ;; Provide key map to access 'kele' from leader key
  (map! :leader
        :desc "Kubernetes" "k" #'kele-dispatch)
  ;; 'kele-dispatch' requires 'kele-mode' to be enabled to watch Kubernetes
  ;; resources
  (kele-mode))
#+end_src
*** GitHub Copilot
/AI is all the rage these days./
- =gptel=: Provides an LLM client for Emacs that can be used to chat with LLMs
#+begin_src elisp
(use-package! gptel
  :config
  ;; using claude sonnet 4 for my chosen default AI model
  (setq gptel-model #'claude-sonnet-4
        ;; gptel uses markdown-mode by default, use org-mode instead
        gptel-default-mode #'org-mode
        ;; override the doom emacs llm module to display buffer side-by-side
        gptel-display-buffer-action t
        ;; configure github copilot backend
        gptel-backend (gptel-make-gh-copilot "Copilot"))
  ;; Register LLM community tool collection
  (mapcar (apply-partially #'apply #'gptel-make-tool)
          (llm-tool-collection-get-all))
  ;; add keybind for activating gptel-mode on an old org-buffer
  (map! :leader
        :prefix ("o" . "open")
        (:prefix ("l" . "llm")
         :desc "Toggle gptel mode for current buffer" "t" #'gptel-mode))
  ;; enable automatic scrolling of llm responses
  (add-hook #'gptel-post-stream-hook #'gptel-auto-scroll))
#+end_src
* Packages
I use some packages from [[https://melpa.org][MELPA]] that Doom Emacs doesn't expose through =init.el=.
These are imported using Doom's =package!= macro.
#+begin_src elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; .doom.d/packages.el

;; Doom Emacs

;; Behaviour Driven Development (BDD)
(package! feature-mode)

;; Python
(package! python-docstring) ; provides syntax highlighting and fill-paragraph
                            ; functionality

;; gRPC
(package! protobuf-mode) ; work with .proto files

;; Kubernetes
(package! kele)
(package! jsonnet-mode)

;; Org
(unpin! org-roam) ; use latest version of org-roam
(package! org-roam-ui) ; enable org-roam-ui server
(package! engrave-faces) ; comprehensive latex code output

;; AI Tools
(package!
  llm-tool-collection :recipe
  (:host github
   :repo "skissue/llm-tool-collection"))

;; Miscellaneous
(package! command-log-mode)
(package! prism)
(package! flyover)
#+end_src
* Workarounds
** MacOS & PDF Tools
When using HiDPI displays, =pdf-tools= needs to scale the output image in order to
display something that's readable in an Emacs buffer. As of =pdf-tools= v1.1.0,
this is enabled by default, but Doom Emacs currently pins an older version, so I
need to set this variable within my config.
#+begin_src elisp
;; Enable scaling for HiDPI displays
(use-package! pdf-tools
  :defer
  :config
  (setq pdf-view-use-scaling t))

;; Enable precision scrolling globally
(pixel-scroll-precision-mode)
#+end_src
** UK Keyboard
#+begin_src elisp
;; Rebind hash key
(map!
  :desc "Override M-3 to insert # rather than change workspace when in insert mode"
  :i "M-3"
  #'(lambda () (interactive) (insert "#")))
#+end_src
** Manuals
MacOS comes with BSD =sed=, which causes issues with the regex used by =Man-mode=
for reading manual pages. Override the =Man-sed-command= varibale to use the GNU
version instead. You can install these through the =coreutils= package on the
Homebrew repository.
#+begin_src elisp
(if (featurep :system 'macos) (setq Man-sed-command "gsed"))
#+end_src

#+title: Harry's Doom Emacs Config
#+author: Harry Tucker

# HTML and LaTeX export --------------------------------------------------------
#+setupfile: org-themes/src/white_clean/white_clean.theme
#+latex_class: mimore
# ------------------------------------------------------------------------------

* About
This is my personal Emacs config that I use for my work and personal stuff.
This config is pretty small, and primarily makes small changes to things that
bother me, as Doom Emacs is pretty nice for me out of the box. I primarily work
with:
+ Go
+ Python
+ Rust
+ Docker
+ Kubernetes
You may notice that I have enabled Doom's Java module, this is primarily so I
have =groovy-mode= available for when I need to edit Jenkinsfiles and the like.
** Build Information
#+begin_src elisp :exports output :tangle no :eval t
(emacs-version)
#+end_src

#+RESULTS:
: GNU Emacs 28.1 (build 1, x86_64-pc-linux-gnu, GTK+ Version 3.24.20, cairo version 1.16.0)
:  of 2022-05-31

#+begin_src elisp :exports output :tangle no :eval t
system-configuration-options
#+end_src

#+RESULTS:
: --build=x86_64-linux-gnu --prefix=/usr '--includedir=${prefix}/include' '--mandir=${prefix}/share/man' '--infodir=${prefix}/share/info' --sysconfdir=/etc --localstatedir=/var --disable-silent-rules '--libdir=${prefix}/lib/x86_64-linux-gnu' '--libexecdir=${prefix}/lib/x86_64-linux-gnu' --disable-maintainer-mode --disable-dependency-tracking --prefix=/usr --sharedstatedir=/var/lib --libexecdir=/usr/lib --localstatedir=/var/lib --infodir=/usr/share/info --mandir=/usr/share/man --enable-locallisppath=/etc/emacs:/usr/local/share/emacs/28.1/site-lisp:/usr/local/share/emacs/site-lisp:/usr/share/emacs/28.1/site-lisp:/usr/share/emacs/site-lisp --program-suffix=28 --with-modules --with-file-notification=inotify --with-mailutils --with-harfbuzz --with-json --with-zlib --with-native-compilation 'CFLAGS=-g -O2 -fdebug-prefix-map=/build/emacs28-jmphgn/emacs28-28.1~1.git5a223c7f2e=. -fstack-protector-strong -Wformat -Werror=format-security -no-pie' 'CPPFLAGS=-Wdate-time -D_FORTIFY_SOURCE=2' 'LDFLAGS=-Wl,-Bsymbolic-functions -Wl,-z,relro -no-pie'
* Configuration
** User Identification
#+begin_src elisp
;; Emacs User Identification
(setq user-full-name "Harry Tucker"
      user-mail-address "tucker.harry@outlook.com")
#+END_SRC
** General
*** Visuals
**** Theme & Font
Dracula is my theme of choice, and JetBrains Mono my favourite font. By default,
Treemacs uses a colour scheme based on the Atom text editor, so I set this to
=doom-colors= match the rest of the editor.
#+begin_src elisp
;; Set themes for Doom and Treemacs, and select the JetBrains Mono font
(setq doom-theme 'doom-dracula
      doom-themes-treemacs-theme "doom-colors"
      doom-font (font-spec
                 :family "JetBrains Mono"
                 :weight 'bold
                 :size 14))
#+end_src
**** Splash Image
#+begin_src elisp
;; Constructs splash image path by concatenating the configured Doom config
;; directory with the image path.
;;
;; This assumes you've pulled this from Git to get the images for my config.
(setq fancy-splash-image (concat doom-user-dir "images/power-splash.png"))
#+end_src
**** Modeline
This provides no functionality whatsoever, but I like having an icon that
displays the current major-mode in use.
#+begin_src elisp
;; Enables modeline icons with colour support
(setq doom-modeline-major-mode-icon t
      doom-modeline-major-mode-color-icon t)
#+end_src
**** Editor
Normally this is the first thing I set up for any given text editor. Pairing
delimiters by colour makes a lot of sense, and I find it makes code easier to
parse, so I've set this up globally across all programming modes.
#+begin_src elisp
;; Highlights delimiter pairs with varying colours
(add-hook! 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src
**** Evil
I can use =undo-tree= as a linear system most of the time, which is what ends up
happening. In other cases, =undo-tree= basically provides a free stash of previous
code changes if I've been experimenting with some code, so is a nice escape
hatch to have, so I've enabled it as my undo system.
#+begin_src elisp
;; Allows undoing and redoing as a tree of changes, instead of being limited to
;; linear changes
(evil-set-undo-system 'undo-tree)
#+end_src
**** Frames
This snippet automatically maximises the Emacs frame on startup. Enabled on
MacOS only as WSL2doesn't play nicely with this. The =IS-MAC= variable is
populated by Doom Emacs in this case, but this would be possible to handle by
checking the =system-type= variable which is part of the default Emacs install.
#+begin_src elisp
;; If running on a Mac, automatically fullscreen on launch
(if IS-MAC (add-to-list 'default-frame-alist'(fullscreen . fullboth)))
#+end_src
**** Eshell
Doom Emacs disables =eshell= from indicating colour support by default in order to
avoid running into issues with applications using it as an indicator of a fully
functional terminal emulator. I'm fine with working around that when it comes
up, since I can add to =eshell-visual-commands= when needed, so I've re-enabled
colour support.
#+begin_src elisp
;; Provides configuration for working with 'eshell', a shell within Emacs
(use-package! eshell
  :defer
  :config
  ;; Sets the $TERM environment variable to indicate colour support
  (setq eshell-term-name "xterm-256-color"))
#+end_src
** Programming
*** Databases
I only really use PostgreSQL in my day-to-day, so I set it as my default SQL
product dialect.
#+begin_src elisp
;; Provides configuration for working with SQL within Emacs
(use-package! sql
  :defer
  :config
  (sql-set-product 'postgres))
#+end_src
*** Javascript/Typescript
I don't write a lot of Javascript or Typescript, so I haven't invested a lot of
time building a proper configuration for those modes. In what experience I have
had, running code actions through =SPC-c-a= doesn't work as well as the language
servers for Go or Rust, so I've enabled auto fixes to run on save to avoid
running eslint through a shell or fixing those lint failures by hand.
#+begin_src elisp
;; Provides configuration for using 'eslint' with Emacs
(use-package! lsp-eslint
  :defer
  :config
  ;; Automatically fix trivial lint failures
  (setq lsp-eslint-auto-fix-on-save t))
#+end_src
*** Rust
RLS has been deprecated as the primary language server for Rust and
rust-analyzer is official language server going forward. I've set rust-analyzer
as my language server choice and enabled procedural macro expansion and build
script support.
#+begin_src elisp
;; Provides configuration for working with the Rust programming language
(use-package! rustic
  :defer
  :config
  ;; Use 'rust-analyser', and enable options that allow further completion
  ;; support for crates that rely on macros and build scripts
  (setq lsp-rust-server 'rust-analyzer
        lsp-rust-analyzer-proc-macro-enable t
        lsp-rust-analyzer-cargo-run-build-scripts t))
#+end_src
*** Python
I like using hard line wraps to keep my Python comments tidy, so let's use a
hook to enable =python-docstring-mode= for any Python buffers. This minor mode
lets me use =fill-paragraph= while keeping everything Pythonic, and enables syntax
highlighting in docstrings.
#+begin_src elisp
;; Provides better Emacs support for Python docstrings
(use-package! python-docstring-mode
  :hook python-mode)
#+end_src
*** Go
Out of the box, =go-mode= provides everything I need, but visualising coverage
using the =go-coverage= command is kind of lacklustre. This is kind of a bad hack
job but my Elisp isn't great. After loading in the =+go--run-tests= function, I've
defined my own function for running it, then automatically calling =go-coverage=
against the generated output, then binding that to a shortcut underneath the
local leader key.
#+begin_src elisp :tangle no
;; Provides configuration for working with the Go programming language
(use-package! go-mode
  :defer
  :config
  ;; Runs Go tests, and generate a coverage profile to 'cover.out'
  ;;
  ;; Note: this function does not currently clean up the produced coverage profile
  ;; once you're done.
  (defun go-cover-buffer ()
    (interactive)
    (+go--run-tests "-coverprofile cover.out")
    (go-coverage "cover.out"))
  ;; Make 'go-cover-buffer' available through the local leader key map
  (map! :map go-mode-map
        :localleader
        :prefix "t" ; t for tests
        :desc "view coverage" "c" #'go-cover-buffer))
#+end_src
*** Debugging
Doom Emacs can install =dap-mode= and the additional relevant modes for Python
and Go support. However, some of the stuff around it doesn't appear to be set-up
upon enabling the module in =init.el=. This configures a bunch of keybinds to
enable easier use of =dap-mode= once a session has been started without having
to =M-x= every single command.
#+begin_src elisp
;; Provides configuration for using the Debug Adapter Protocol from Emacs
(use-package! dap-mode
  :defer
  :init
  ;; Provides key map for interacting with 'dap-mode' for debugging supported
  ;; languages
  (map! :map dap-mode-map
        :leader
        :prefix ("d" . "dap")
        ;; basics
        :desc "dap next"          "n" #'dap-next
        :desc "dap step in"       "i" #'dap-step-in
        :desc "dap step out"      "o" #'dap-step-out
        :desc "dap continue"      "c" #'dap-continue
        :desc "dap hydra"         "h" #'dap-hydra
        :desc "dap debug restart" "r" #'dap-debug-restart
        :desc "dap debug"         "s" #'dap-debug

        ;; debug
        :prefix ("dd" . "Debug")
        :desc "dap debug recent"  "r" #'dap-debug-recent
        :desc "dap debug last"    "l" #'dap-debug-last

        ;; eval
        :prefix ("de" . "Eval")
        :desc "eval"                "e" #'dap-eval
        :desc "eval region"         "r" #'dap-eval-region
        :desc "eval thing at point" "s" #'dap-eval-thing-at-point
        :desc "add expression"      "a" #'dap-ui-expressions-add
        :desc "remove expression"   "d" #'dap-ui-expressions-remove

        ;; breakpoints
        :prefix ("db" . "Breakpoint")
        :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
        :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
        :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
        :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)
  :config
  ;; Rust template for DAP debugging
  (dap-register-debug-template "Rust::GDB Run Configuration"
                               (list :type "gdb"
                                     :request "launch"
                                     :name "GDB::Run"
                                     :gdbpath "rust-gdb"
                                     :target nil
                                     :cwd nil)))
#+end_src
** Writing
*** Org-Mode
**** Org Modern
Using =org-modern=, I can style =org-mode= buffers in a nicer fashion. I've also
increased the font height for the top two heading levels to make org documents
look less flat.
#+begin_src elisp
;; Provides configuration for working with 'org-mode'
(use-package! org
  :defer
  :config
  ;; Hide emphasis markers that wrap text (i.e. bold, italics)
  (setq org-hide-emphasis-markers t)
  ;; Wrap text at 80 characters for better Git diffs and readability
  (add-hook! 'org-mode-hook #'auto-fill-mode)
  ;; Use 'pdf-tools' as the default viewer for exported Org documents
  (add-to-list 'org-file-apps '("\\.pdf\\'" . pdf-tools))
  ;; Enlarge top and second level heading fonts
  (custom-set-faces!
    '(org-level-1
      :height 1.2
      :inherit outline-1)
    '(org-level-2
      :height 1.1
      :inherit outline-2)))

;; Provides 'org-modern' configuration in place of Doom's (org +pretty)
(use-package! org-modern
  :after org
  :config
  ;; Disable table formatting and star hiding, increase label border
  (setq org-modern-table nil
        org-modern-hide-stars nil
        org-modern-label-border 0.3)
  ;; Enable org-modern globally
  (global-org-modern-mode))
#+end_src
**** Exporting
Booktabs is a LaTeX package that's useful for configuring the typesetting of
tables, so we'll add this to our default package list for LaTeX export.

When using =org-mode= for notes, I end up filling every paragraph to hard wrap
the text to 80 characters per-line. I wanted this to behave like Magit's commit
message window mode and automatically hard-wrap the text. Turns out
=auto-fill-mode= can do this for you.

You can also use =refill-mode= for this purpose but the automatic refilling of
existing paragraphs causes issues with code blocks and everything falls apart.
That works fine on =text-mode= buffers though.
#+begin_src elisp
;; Provides configuration for generating LaTeX using 'org-mode'
(use-package! org
  :defer
  :config
  ;; Enable export support for LaTeX and BibTeX formats
  (require 'ox-latex)
  (require 'ox-bibtex)
  ;; Better syntax highlighting in exported LaTeX
  (setq org-latex-src-block-backend 'minted)
  ;; Enable additional packages for exported LaTeX, takes the form:
  ;;    ("options" "package" SNIPPET-FLAG COMPILERS)
  (setq org-latex-packages-alist '(("" "booktabs")
                                   ("" "tabularx")
                                   ("" "color")
                                   ("newfloat" "minted")))
  ;; Define 'mimore' LaTeX document class for use in exports
  (add-to-list 'org-latex-classes
               '("mimore"
                 "\\documentclass{mimore}\n[NO-DEFAULT-PACKAGES\]\n[PACKAGES\]\n[EXTRA\]"
                 ("\\section{%s}" . "\\section\*{%s}")
                 ("\\subsection{%s}" . "\\subsection\*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection\*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph\*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph\*{%s}"))))
#+end_src
**** Org-Tree-Slide
Using =org-mode= for presentations, let's prevent headings below the immediate
top level from being used as slides, and default to the presentation profile for
=org-tree-slide=.

I tried adding a hook for toggling a light theme and line numbers when beginning
a presentation, but that ended up being more trouble than it's worth for now.
#+begin_src elisp
;; Provides support for presenting directly from 'org-mode' buffers
(use-package! org-tree-slide
  :after org
  :config
  ;; Hide formatting characters, use top-level headings as slides
  (setq org-tree-slide-skip-outline-level 2)
  ;; Use the fancy presentation profile, shiny animations!
  (org-tree-slide-presentation-profile))
#+end_src
**** Org Roam & UI
I use =org-roam= for note taking and building up a knowledge graph. The built
in-graph is nice for quick stuff, but external links end up making it very
messy, so I've disabled my most common link types from showing: files and web
links.
#+begin_src elisp
;; Provides configuration for 'org-roam', an Emacs knowledge graph
(use-package! org-roam
  :defer
  :config
  ;; Hide common link types from org-roam graph
  (setq org-roam-graph-link-hidden-types
        '("file"
          "http"
          "https")))
#+end_src

For more in-depth browsing of the graph, =org-roam-ui= is pretty good. I haven't
enabled starting it automatically on launching org-roam just yet as I want to
use roam more before I go that far. Most of the config here just follows the
recommendations from [[https://github.com/org-roam/org-roam-ui][org-roam-ui's README]].
#+begin_src elisp
;; Provides 'websocket', a dependency of 'org-roam-ui'
(use-package! websocket
  :after org-roam)

;; Provides 'org-roam-ui' a web frontend for 'org-roam'
(use-package! org-roam-ui
  :after org-roam
  :config
  ;; Sync UI theme with Emacs, follow current the buffer, update on save, and
  ;; open browser on start
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src
** Tooling
*** Kubernetes
Define autoloads for commands from =kubernetes=, and enable =evil-mode= bindings for
use with the overview window.

This module is currently experimental, both for me to use and for the author to
write at the moment. I need to think of an Evil keymap for this, but for now
I've just mapped the dispatch menu to =SPC-k=.
#+begin_src elisp
;; Provides configuration for interacting with Kubernetes clusters from within
;; Emacs
(use-package! kele
  :init
  (map! :leader
        :desc "Kubernetes" "k" #'kele-dispatch)
  :config
  (kele-mode 1))
#+end_src
* Packages
I use some packages from [[https://melpa.org][MELPA]] that Doom Emacs doesn't expose through =init.el=.
These are imported using Doom's =package!= macro.
#+begin_src elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; .doom.d/packages.el

;; Doom Emacs
;;
;; Some magit dependencies are expecting functions defined in Emacs 29, and
;; breaking, so pinning these packages as per:
;; https://emacs.stackexchange.com/questions/75827/doom-emacs-error-running-hook-global-git-commit-mode-because-void-variable
(package! transient
  :pin "c2bdf7e12c530eb85476d3aef317eb2941ab9440"
  :recipe (:host github :repo "magit/transient"))

(package! with-editor
  :pin "bbc60f68ac190f02da8a100b6fb67cf1c27c53ab"
  :recipe (:host github :repo "magit/with-editor"))


;; Python
(package! python-docstring) ; provides syntax highlighting and fill-paragraph
                            ; functionality

;; gRPC
(package! protobuf-mode) ; work with .proto files

;; Kubernetes
(package! kele)

;; Org
(unpin! org-roam) ; use latest version of org-roam
(package! org-roam-ui) ; enable org-roam-ui server
(package! org-modern) ; nicer fontification than doom's +pretty

;; Benchmark init times
(package! benchmark-init)
#+end_src
* Workarounds
** MacOS & PDF Tools
I have found that PDF Tools often really screws up the display resolution when
running on MacOS for reasons I don't entirely understand. The following snippet
may or may not fix it, but I'm including it anyway.
#+begin_src elisp
(setq pdf-view-use-scaling t          ; MacOS specific workarounds
      pdf-view-use-imagemagick nil)
#+end_src
